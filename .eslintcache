[{"C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\index.js":"1","C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\App.js":"2","C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\reportWebVitals.js":"3","C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\SocialEvents.js":"4","C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\ResultsPage.js":"5","C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\firebase.js":"6"},{"size":523,"mtime":1607383465032,"results":"7","hashOfConfig":"8"},{"size":3348,"mtime":1607383465027,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1607383465032,"results":"10","hashOfConfig":"8"},{"size":2859,"mtime":1607383465031,"results":"11","hashOfConfig":"8"},{"size":6975,"mtime":1607385309385,"results":"12","hashOfConfig":"8"},{"size":545,"mtime":1607383465031,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"xwzl5b",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\index.js",[],["29","30"],"C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\App.js",["31","32","33","34"],"import { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport SocialEvents from './SocialEvents.js';\r\nimport ResultsPage from './ResultsPage.js';\r\nimport './sass/App.scss';\r\n\r\n\r\n/* PSEUDOCODE\r\n  - Firebase --> VIEW ONE\r\n    - explain to the user what the app does\r\n    - read from the database and display six cards on screen\r\n      - two rows of three\r\n      - details for database\r\n        - name (Date Night)\r\n        - Type (Food & Drink)\r\n        - PartySize (2)\r\n        - Time\r\n        - Date\r\n    - ask the user to select one of the event cards\r\n    - onChange save the selected card to state\r\n    - onSubmit/onClick pass state through props to the method that displays that event to VIEW TWO\r\n      - the date will be used for the axios call\r\n      \r\n  - VIEW TWO\r\n    - Axios\r\n      - endpoint?:  http://api.tvmaze.com/schedule?country=:countrycode&date=:date\r\n        - country: CA\r\n          - param in axios call (hardcoded)\r\n          - pick six days that have information\r\n        - date: YEAR-MO-DA (variable)\r\n      - make the API call based on the above parameters\r\n      - save that response to our state array object\r\n    - display all tv shows onto the page for that date\r\n    - pick genre\r\n      - user picks a genre from a pre-defined list\r\n        - dropdown menu\r\n      - onChange save selected genre to state\r\n      - submit/click handler will trigger:\r\n        - filter through the axios call that is saved in state to find the tv shows that match the chosen genre\r\n          - save the matching shows in a separate array in state\r\n    - map through array and render TV shows on the screen and apply filter to narrow down by genre\r\n    - allow the user to start over via button that will send them back to VIEW ONE\r\n\r\n    - REVIEW does time zone matter?\r\n    - retrieve from API:\r\n      - airdate --> YEAR-MO-DA\r\n      - airstamp?\r\n        - NOTE airstamp is UTC\r\n      - airtime --> 24hr clock\r\n        - NOTE airtime is AST\r\n      - id\r\n      - image\r\n      - show\r\n        - genres\r\n          - NOTE check if the array is empty\r\n        - image\r\n          - NOTE check if the object is empty\r\n          - check if first image property is empty/null\r\n        - language --> English only\r\n        - name\r\n        - official site --> STRETCH\r\n        - rating? --> some are null\r\n        - runtime --> STRETCH\r\n        - schedule\r\n          - days (array)\r\n          - time --> if airtime is null? error handling?\r\n        - status\r\n          - NOTE check for \"Running\" status\r\n        - summary --> STRETCH\r\n\r\n        - NOTE find alt text!\r\n          - use name (for now)\r\n            - show name + episode name/number\r\n\r\n\r\n    Good job Team! :)\r\n*/\r\n\r\n\r\n// {/* STRETCH: Homepage --> TALK TO CLIENT */ }\r\n\r\n// {/* COMPONENT ONE: SocialEvents */ }\r\n// {/* contains social event cards, title, INSTRUCTIONS */ }\r\n\r\n// {/* COMPONENT TWO: ResultsPage */ }\r\n// {/* contains: social event component, genre selection, filtered tv shows component (AXIOS), pick again button */ }\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  // Display data\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <SocialEvents/>\r\n        <ResultsPage />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\reportWebVitals.js",[],"C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\SocialEvents.js",["35","36","37"],"import { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n// \r\nimport firebase from './firebase';\r\n\r\n\r\n\r\n\r\nclass SocialEvents extends Component {\r\nconstructor() {\r\nsuper();\r\nthis.state = {\r\n    socialEvents: [],\r\n    // userInput: ''\r\n}\r\n}\r\n\r\n\r\ncomponentDidMount() {\r\n\r\n// Variable that holds a reference to our database\r\nconst dbRef = firebase.database().ref();\r\ndbRef.on('value', (response) => {\r\n\r\n    // Here we're creating a variable to store the new state we want to introduce to our app\r\n    const newState = [];\r\n\r\n    // Here we store the response from our query to Firebase inside of a variable called data\r\n    // .val() is a Firebase method that gets us the information we want\r\n    const data = response.val();\r\n\r\n    console.log(response.val());\r\n\r\n    // data is an object, so we iterate through it using a for in loop to access each book name \r\n    for (let key in data) {\r\n\r\n    // inside the loop, we push each book name to an array we already created inside the .on() function called newState\r\n    newState.push({ key: key, eventDetails: data[key] });\r\n    }\r\n\r\n    // then, we call this.setState in order to update our component's state using the local array newState\r\n    this.setState({\r\n    socialEvents: newState\r\n    });\r\n\r\n    console.log(this.state.socialEvents)\r\n\r\n});\r\n}\r\n\r\n\r\n\r\nhandleChange = (event) => {\r\n// we're telling React to update the state of our `App` component to be \r\n// equal to whatever is currently the value of the input field\r\n\r\nthis.setState({\r\n    userInput: event.target.id\r\n}, () => { console.log(this.state.userInput)});\r\n// console.log(this.state.userInput)\r\n}\r\n\r\n\r\nsubmitForm = (event) => {\r\nevent.preventDefault();\r\nthis.setState({\r\n    selectedEvent: this.state.userInput\r\n})\r\nconsole.log(this.state.selectedEvent)\r\n}\r\n\r\n// Display data\r\nrender() {\r\nreturn (\r\n    <div className=\"SocialEvents\">\r\n    <form>\r\n        {this.state.socialEvents.map((eachEvent) => {\r\n        return (\r\n            <div key={eachEvent.key} onChange={this.handleChange} >\r\n            <input \r\n                // checked={this.state.userInput === eachEvent.key}\r\n                type=\"radio\" className=\"check\" id={eachEvent.key} name=\"socialEventCards\" value={eachEvent.key} required/>\r\n            <label htmlFor={eachEvent.key}>\r\n                <ul>\r\n                <li><h2>Name: {eachEvent.eventDetails.name}</h2></li>\r\n                <li>Party Size: {eachEvent.eventDetails.partySize}</li>\r\n                <li>Type: {eachEvent.eventDetails.type}</li>\r\n                <li>Date: </li>\r\n                <li>Time: </li>\r\n                </ul>\r\n            </label>\r\n            </div>\r\n        )\r\n        })}\r\n        <button onClick={this.submitForm} className=\"submit\" type=\"submit\">Submit</button>\r\n    </form>\r\n    </div>\r\n);\r\n}\r\n}\r\n\r\nexport default SocialEvents;\r\n","C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\ResultsPage.js",["38","39"],"C:\\Users\\booki\\OneDrive\\Documents\\Juno Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\firebase.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":2,"column":27,"nodeType":"46","messageId":"47","endLine":2,"endColumn":33},{"ruleId":"44","severity":1,"message":"48","line":2,"column":35,"nodeType":"46","messageId":"47","endLine":2,"endColumn":40},{"ruleId":"44","severity":1,"message":"49","line":2,"column":42,"nodeType":"46","messageId":"47","endLine":2,"endColumn":46},{"ruleId":"50","severity":1,"message":"51","line":91,"column":3,"nodeType":"52","messageId":"53","endLine":94,"endColumn":4},{"ruleId":"44","severity":1,"message":"45","line":2,"column":27,"nodeType":"46","messageId":"47","endLine":2,"endColumn":33},{"ruleId":"44","severity":1,"message":"48","line":2,"column":35,"nodeType":"46","messageId":"47","endLine":2,"endColumn":40},{"ruleId":"44","severity":1,"message":"49","line":2,"column":42,"nodeType":"46","messageId":"47","endLine":2,"endColumn":46},{"ruleId":"44","severity":1,"message":"48","line":2,"column":10,"nodeType":"46","messageId":"47","endLine":2,"endColumn":15},{"ruleId":"44","severity":1,"message":"49","line":2,"column":17,"nodeType":"46","messageId":"47","endLine":2,"endColumn":21},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Link' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]