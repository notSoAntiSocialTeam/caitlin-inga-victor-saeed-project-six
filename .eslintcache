[{"C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\index.js":"1","C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\reportWebVitals.js":"2","C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\App.js":"3","C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\SocialEvents.js":"4","C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\ResultsPage.js":"5","C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\firebase.js":"6"},{"size":497,"mtime":1607447912580,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1607289295031,"results":"9","hashOfConfig":"8"},{"size":3468,"mtime":1607447921346,"results":"10","hashOfConfig":"8"},{"size":3736,"mtime":1607447921347,"results":"11","hashOfConfig":"8"},{"size":7216,"mtime":1607449928697,"results":"12","hashOfConfig":"8"},{"size":545,"mtime":1607447739457,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"t7cnda",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\index.js",[],["29","30"],"C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\reportWebVitals.js",[],"C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\App.js",["31","32"],"import { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport SocialEvents from './SocialEvents.js';\r\nimport ResultsPage from './ResultsPage.js';\r\nimport './sass/App.scss';\r\n\r\n\r\n/* PSEUDOCODE\r\n  - Firebase --> VIEW ONE\r\n    - explain to the user what the app does\r\n    - read from the database and display six cards on screen\r\n      - two rows of three\r\n      - details for database\r\n        - name (Date Night)\r\n        - Type (Food & Drink)\r\n        - PartySize (2)\r\n        - Time\r\n        - Date\r\n    - ask the user to select one of the event cards\r\n    - onChange save the selected card to state\r\n    - onSubmit/onClick pass state through props to the method that displays that event to VIEW TWO\r\n      - the date will be used for the axios call\r\n      \r\n  - VIEW TWO\r\n    - Axios\r\n      - endpoint?:  http://api.tvmaze.com/schedule?country=:countrycode&date=:date\r\n        - country: CA\r\n          - param in axios call (hardcoded)\r\n          - pick six days that have information\r\n        - date: YEAR-MO-DA (variable)\r\n      - make the API call based on the above parameters\r\n      - save that response to our state array object\r\n    - display all tv shows onto the page for that date\r\n    - pick genre\r\n      - user picks a genre from a pre-defined list\r\n        - dropdown menu\r\n      - onChange save selected genre to state\r\n      - submit/click handler will trigger:\r\n        - filter through the axios call that is saved in state to find the tv shows that match the chosen genre\r\n          - save the matching shows in a separate array in state\r\n    - map through array and render TV shows on the screen and apply filter to narrow down by genre\r\n    - allow the user to start over via button that will send them back to VIEW ONE\r\n\r\n    - REVIEW does time zone matter?\r\n    - retrieve from API:\r\n      - airdate --> YEAR-MO-DA\r\n      - airstamp?\r\n        - NOTE airstamp is UTC\r\n      - airtime --> 24hr clock\r\n        - NOTE airtime is AST\r\n      - id\r\n      - image\r\n      - show\r\n        - genres\r\n          - NOTE check if the array is empty\r\n        - image\r\n          - NOTE check if the object is empty\r\n          - check if first image property is empty/null\r\n        - language --> English only\r\n        - name\r\n        - official site --> STRETCH\r\n        - rating? --> some are null\r\n        - runtime --> STRETCH\r\n        - schedule\r\n          - days (array)\r\n          - time --> if airtime is null? error handling?\r\n        - status\r\n          - NOTE check for \"Running\" status\r\n        - summary --> STRETCH\r\n\r\n        - NOTE find alt text!\r\n          - use name (for now)\r\n            - show name + episode name/number\r\n\r\n\r\n    Good job Team! :)\r\n*/\r\n\r\n\r\n// {/* STRETCH: Homepage --> TALK TO CLIENT */ }\r\n\r\n// {/* COMPONENT ONE: SocialEvents */ }\r\n// {/* contains social event cards, title, INSTRUCTIONS */ }\r\n\r\n// {/* COMPONENT TWO: ResultsPage */ }\r\n// {/* contains: social event component, genre selection, filtered tv shows component (AXIOS), pick again button */ }\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  // Display data\r\n  render() {\r\n    return (\r\n\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Route exact path=\"/\" component={SocialEvents} />\r\n          <Route path=\"/results/:key\" component={ResultsPage} />\r\n        </div>\r\n      </Router>\r\n\r\n\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\SocialEvents.js",["33","34"],"import { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport firebase from './firebase';\r\n\r\n\r\nclass SocialEvents extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            socialEvents: [],\r\n            userInput: ''\r\n        }\r\n    }\r\n\r\n    // Get data from Firebase\r\n    componentDidMount() {\r\n        // Variable that holds a reference to our database\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on('value', (response) => {\r\n            // store the new state we want to introduce to our app\r\n            const newState = [];\r\n            // response from our query to Firebase inside of a variable .val() \r\n            const data = response.val();\r\n            // data is an object, so we iterate through it using a for in loop to access each book name \r\n            for (let key in data) {\r\n                // inside the loop, we push each book name to an array we already created inside the .on() function called newState\r\n                newState.push({ key: key, eventDetails: data[key] });\r\n            }\r\n            // then, we call this.setState in order to update our component's state using the local array newState\r\n            this.setState({\r\n                socialEvents: newState\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    // update the state of the component to be equal to input field\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            userInput: event.target.id\r\n        });\r\n    }\r\n\r\n    // Display data\r\n    render() {\r\n        return (\r\n            <div className=\"SocialEvents\">\r\n                <form>\r\n                    {/* Map through the array and display each event on the page */}\r\n                    {this.state.socialEvents.map((eachEvent) => {\r\n                        return (\r\n                            // On change run the function to update the state\r\n                            <fieldset key={eachEvent.key} onChange={this.handleChange} >\r\n                                <input type=\"radio\" className=\"check\" id={eachEvent.key} name=\"socialEventCards\" value={eachEvent.key} required/>\r\n                                <label htmlFor={eachEvent.key}>\r\n                                    <ul>\r\n                                        <li><h2>Name: {eachEvent.eventDetails.name}</h2></li>\r\n                                        <li>Party Size: {eachEvent.eventDetails.partySize}</li>\r\n                                        <li>Type: {eachEvent.eventDetails.type}</li>\r\n                                        <li>Date: {eachEvent.eventDetails.date}</li>\r\n                                        <li>Time: {eachEvent.eventDetails.time}</li>\r\n                                    </ul>\r\n                                </label>\r\n                            </fieldset>\r\n                        )\r\n                    })}\r\n                    {/* Link to Results Page */}\r\n                    {/* Pass selected value and all firebase values to Results */}\r\n                    {/* Add IF statemet to force user to select one option */}\r\n                    {this.state.userInput ? \r\n                        <Link to={{\r\n                            pathname: `/results/${this.state.userInput}`, \r\n                            state: {\r\n                                selectedEvent: this.state.userInput, \r\n                                allEvents: this.state.socialEvents\r\n                            }\r\n                        }}>Results</Link>\r\n                        : <div><p>Results</p><p>Please select your event!</p></div>\r\n                    }\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SocialEvents;\r\n","C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\ResultsPage.js",["35","36"],"C:\\Users\\Akhal\\Documents\\Fall Bootcamp\\Projects\\project6\\caitlin-inga-victor-saeed-project-six\\caitlin-inga-victor-saeed-project-six\\src\\firebase.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":2,"column":42,"nodeType":"43","messageId":"44","endLine":2,"endColumn":46},{"ruleId":"45","severity":1,"message":"46","line":91,"column":3,"nodeType":"47","messageId":"48","endLine":94,"endColumn":4},{"ruleId":"41","severity":1,"message":"49","line":2,"column":27,"nodeType":"43","messageId":"44","endLine":2,"endColumn":33},{"ruleId":"41","severity":1,"message":"50","line":2,"column":35,"nodeType":"43","messageId":"44","endLine":2,"endColumn":40},{"ruleId":"41","severity":1,"message":"50","line":2,"column":10,"nodeType":"43","messageId":"44","endLine":2,"endColumn":15},{"ruleId":"41","severity":1,"message":"42","line":2,"column":17,"nodeType":"43","messageId":"44","endLine":2,"endColumn":21},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Router' is defined but never used.","'Route' is defined but never used.","no-global-assign","no-unsafe-negation"]